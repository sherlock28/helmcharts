apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          lifecycle:
            postStart:
              exec:
                command: ["su", "-", "postgres", "-c", "until psql -h localhost -U postgres -c 'SELECT 1' > /dev/null 2>&1; do echo 'Waiting for postgres...'; sleep 1; done; echo \"SELECT 'CREATE DATABASE \"{{ .Values.env.defaultDatabase }}\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ .Values.env.defaultDatabase }}')\\gexec\" | psql -U postgres -h localhost"]
          ports:
            - containerPort: 5432
              name: postgresport
          env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: password
          - name: TZ
            value: {{ .Values.env.tz }}
          - name: PGTZ
            value: {{ .Values.env.pgtz }}
          readinessProbe:
            initialDelaySeconds: 30
            failureThreshold: 10
            timeoutSeconds: 2
            exec:
              command: ["psql", "-w", "-U", {{ .Values.env.username }}, "-d", "{{ .Values.env.defaultDatabase }}", "-c", "SELECT 1"]
          livenessProbe:
            initialDelaySeconds: 32
            failureThreshold: 10
            timeoutSeconds: 2
            exec:
              command: ["psql", "-w", "-U", "{{ .Values.env.username }}", "-d", "{{ .Values.env.defaultDatabase }}", "-c", "SELECT 1"]
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: pgdata
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: postgres-pvc
